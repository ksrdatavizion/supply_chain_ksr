
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_new_project'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  my_new_project:
    # Applies to all files under models/example/
    raw:
      +materialized: table
      +database: supply_chain
      +schema: raw
      +tags: ['raw']
    silver:
      +materialized: table
      +database: supply_chain
      +schema: silver
    gold:
      +materialized: table
      +database: supply_chain
      +schema: gold
seeds:
  my_new_project:  # Replace with your actual dbt project name
    warehouse_locations:
      +schema: raw
      +tags: [raw] 
      +quote_columns: false
      +column_types:
        city_name: VARCHAR(50)
        state_name: VARCHAR(50)
        region: VARCHAR(20)
        warehouse_name: VARCHAR(50)
      +post-hook:
        - >
          INSERT INTO AUDIT.MODEL_EXECUTION_LOG (
            model_name,
            load_date,
            row_count,
            file_name,
            last_modified,
            status,
            comments
          )
          SELECT
            'warehouse_locations',
            CURRENT_TIMESTAMP,
            COUNT(*),
            'warehouse_locations.csv',
            CURRENT_TIMESTAMP,
            'SUCCESS',
            'Seed loaded via dbt seed'
          FROM {{ generate_schema_name('raw', this) }}.WAREHOUSE_LOCATIONS
          WHERE NOT EXISTS (
            SELECT 1
            FROM AUDIT.MODEL_EXECUTION_LOG
            WHERE model_name = 'warehouse_locations'
              AND row_count = (
                SELECT COUNT(*) FROM {{ generate_schema_name('raw', this) }}.WAREHOUSE_LOCATIONS
              )
          )
snapshots:
  my_new_project:
    customer:
      +schema: silver
    inventory:
      +schema: silver